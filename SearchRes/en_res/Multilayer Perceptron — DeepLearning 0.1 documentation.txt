This section assumes the reader has already read through Classifying MNIST digits using Logistic Regression.
L1 and L2 regularization, floatX. If you intend to run the
The next architecture we are going to present using Theano is the
single-hidden-layer Multi-Layer Perceptron (MLP). An MLP can be viewed as a
logistic regression classifier where the input is first transformed using a
input data into a space where it becomes linearly separable. This intermediate
layer is referred to as a hidden layer. A single hidden layer is sufficient
to make MLPs a universal approximator. However we will see later on that
there are substantial benefits to using many such hidden layers, i.e. the very
premise of deep learning. See these course notes for an introduction to
This tutorial will again tackle the problem of MNIST digit classification.
An MLP (or Artificial Neural Network - ANN) with a single hidden layer
(e.g. separately on each element of the vector, yielding a same-size vector).
To train an MLP, we learn all parameters of the model, and here we use
The set of parameters to learn is the set . Obtaining the gradients
Thankfully, since Theano performs automatic differentiation, we will not need to
This tutorial will focus on a single-hidden-layer MLP. We start off by
construct the MLP we will then only need to throw a logistic regression
 Typical hidden layer of a MLP: units are fully-connected and have
 sigmoidal activation function. Weight matrix W is of shape (n_in,n_out)
 :param rng: a random number generator used to initialize weights
 :param activation: Non linearity to be applied in the hidden
The initial values for the weights of a hidden layer should be uniformly
sampled from a symmetric interval that depends on the activation function. For
and is the number of units in the -th layer. For
This initialization ensures that, early in training, each neuron operates in a
regime of its activation function where information can easily be propagated
 # `W` is initialized with `W_values` which is uniformely sampled
 # the output of uniform if converted using asarray to dtype
 # theano.config.floatX so that the code is runable on GPU
 # Note : optimal initialization of weights is dependent on the
 # For example, results presented in [Xavier10] suggest that you
 # should use 4 times larger initial weights for sigmoid
 # We have no info for other function, so we use the same as
If you give this graph as input to the LogisticRegression class,
implemented in the previous tutorial Classifying MNIST digits using Logistic Regression, you get the output
of the MLP. You can see this in the following short implementation of
 A multilayer perceptron is a feedforward artificial neural network model
 that has one layer or more of hidden units and nonlinear activations.
 Intermediate layers usually have as activation function tanh or the
 sigmoid function (defined here by a ``HiddenLayer`` class) while the
 top layer is a softmax layer (defined here by a ``LogisticRegression``
 :param rng: a random number generator used to initialize weights
 :param input: symbolic variable that describes the input of the
 :param n_in: number of input units, the dimension of the space in
 :param n_out: number of output units, the dimension of the space in
 # Since we are dealing with a one hidden layer MLP, this will translate
 # into a HiddenLayer with a tanh activation function connected to the
 # LogisticRegression layer; the activation function can be replaced by
 # The logistic regression layer gets as input the hidden units
In this tutorial we will also use L1 and L2 regularization (see
L1 and L2 regularization). For this, we need to compute the L1 norm and the squared L2
 # L1 norm ; one regularization option is to enforce L1 norm to
 # square of L2 norm ; one regularization option is to enforce
 # negative log likelihood of the MLP is given by the negative
 # log likelihood of the output of the model, computed in the
 # same holds for the function computing the number of errors
 # the parameters of the model are the parameters of the two layer it is
As before, we train this model using stochastic gradient descent with
mini-batches. The difference is that we modify the cost function to include the
controlling the weight of these regularization terms in the total cost function.
 # the cost we minimize during training is the negative log likelihood of
 # the model plus the regularization terms (L1 and L2); cost is expressed
We then update the parameters of the model using the gradient. This code is
almost identical to the one for logistic regression. Only the number of
parameters differ. To get around this ( and write code that could work
for any number of parameters) we will use the list of parameters that
we created with the model params and parse it, computing a gradient
 # compute the gradient of cost with respect to theta (sorted in params)
 # the resulting gradients will be stored in a list gparams
 # specify how to update the parameters of the model as a list of
 # given two lists of the same length, A = [a1, a2, a3, a4] and
 # B = [b1, b2, b3, b4], zip generates a list C of same size, where each
 # element is a pair formed from the two lists :
 # C = [(a1, b1), (a2, b2), (a3, b3), (a4, b4)]
 # compiling a Theano function `train_model` that returns the cost, but
 # in the same time updates the parameter of the model based on the rules
Having covered the basic concepts, writing an MLP class becomes quite easy.
The code below shows how this can be done, in a way which is analogous to our previous logistic regression implementation.
instead of feeding the input to the logistic regression you insert a
activation function (usually tanh or sigmoid) . One can use many such
hidden layers making the architecture deep. The tutorial will also tackle
 f(x) = G( b^{(2)} + W^{(2)}( s( b^{(1)} + W^{(1)} x))),
 Typical hidden layer of a MLP: units are fully-connected and have
 sigmoidal activation function. Weight matrix W is of shape (n_in,n_out)
 :param rng: a random number generator used to initialize weights
 :param activation: Non linearity to be applied in the hidden
 # `W` is initialized with `W_values` which is uniformely sampled
 # the output of uniform if converted using asarray to dtype
 # theano.config.floatX so that the code is runable on GPU
 # Note : optimal initialization of weights is dependent on the
 # For example, results presented in [Xavier10] suggest that you
 # should use 4 times larger initial weights for sigmoid
 # We have no info for other function, so we use the same as
 A multilayer perceptron is a feedforward artificial neural network model
 that has one layer or more of hidden units and nonlinear activations.
 Intermediate layers usually have as activation function tanh or the
 sigmoid function (defined here by a ``HiddenLayer`` class) while the
 top layer is a softmax layer (defined here by a ``LogisticRegression``
 :param rng: a random number generator used to initialize weights
 :param input: symbolic variable that describes the input of the
 :param n_in: number of input units, the dimension of the space in
 :param n_out: number of output units, the dimension of the space in
 # Since we are dealing with a one hidden layer MLP, this will translate
 # into a HiddenLayer with a tanh activation function connected to the
 # LogisticRegression layer; the activation function can be replaced by
 # The logistic regression layer gets as input the hidden units
 # L1 norm ; one regularization option is to enforce L1 norm to
 # square of L2 norm ; one regularization option is to enforce
 # negative log likelihood of the MLP is given by the negative
 # log likelihood of the output of the model, computed in the
 # same holds for the function computing the number of errors
 # the parameters of the model are the parameters of the two layer it is
 :param L1_reg: L1-norms weight when added to the cost (see
 :param L2_reg: L2-norms weight when added to the cost (see
 :param n_epochs: maximal number of epochs to run the optimizer
 :param dataset: the path of the MNIST dataset file from
 # compute number of minibatches for training, validation and testing
 x = T.matrix(x) # the data is presented as rasterized images
 y = T.ivector(y) # the labels are presented as 1D vector of
 # the cost we minimize during training is the negative log likelihood of
 # the model plus the regularization terms (L1 and L2); cost is expressed
 # compiling a Theano function that computes the mistakes that are made
 # compute the gradient of cost with respect to theta (sorted in params)
 # the resulting gradients will be stored in a list gparams
 # specify how to update the parameters of the model as a list of
 # given two lists of the same length, A = [a1, a2, a3, a4] and
 # B = [b1, b2, b3, b4], zip generates a list C of same size, where each
 # element is a pair formed from the two lists :
 # C = [(a1, b1), (a2, b2), (a3, b3), (a4, b4)]
 # compiling a Theano function `train_model` that returns the cost, but
 # in the same time updates the parameter of the model based on the rules
 patience = 10000 # look as this many examples regardless
 patience_increase = 2 # wait this much longer when a new best is
 improvement_threshold = 0.995 # a relative improvement of this much is
 # if we got the best validation score until now
 obtained at iteration %i, with test performance %f %%) %
  ran for %.2fm % ((end_time - start_time) / 60.)), file=sys.stderr)
Optimization complete. Best validation score of 1.690000 % obtained at iteration 2070000, with test performance 1.650000 %
On an Intel(R) Core(TM) i7-2600K CPU  3.40GHz the code runs with
approximately 10.3 epoch/minute and it took 828 epochs to reach a test
To put this into perspective, we refer the reader to the results section of this page.
There are several hyper-parameters in the above code, which are not (and,
hyper-parameters is not a feasible problem. First, we cant simply optimize
is not convex and finding a (local) minimum would involve a non-trivial
The good news is that over the last 25 years, researchers have devised various
rules of thumb for choosing hyper-parameters in a neural network. A very
Leon Bottou, Genevieve Orr, and Klaus-Robert Mueller. In here, we summarize
the same issues, with an emphasis on the parameters and techniques that we
Two of the most common ones are the and the function. For
are symmetric around the origin are preferred because they tend to produce
zero-mean inputs to the next layer (which is a desirable property).
At initialization we want the weights to be small enough around the origin
so that the activation function operates in its linear regime, where gradients are
are to conserve variance of the activation as well as variance of back-propagated gradients from layer to layer.
This allows information to flow well upward and downward in the network and
Under some assumptions, a compromise between these two constraints leads to the following
for sigmoid. Where is the number of inputs and the number of hidden units.
There is a great deal of literature on choosing a good learning rate. The
simplest solution is to simply have a constant rate. Rule of thumb: try
(logarithmic) grid search to the region where you obtain the lowest
Decreasing the learning rate over time is sometimes a good idea. One simple
 is the initial rate (chosen, perhaps, using the grid search
which controls the rate at which the learning rate decreases (typically, a
procedures for choosing a learning rate for each parameter (weight) in our
network and for choosing them adaptively based on the error of the
more complicated the input distribution is, the more capacity the network
will require to model it, and so the larger the number of hidden units that
will be needed (note that the number of weights in a layer, perhaps a more direct
penalties), a typical number of hidden units vs. generalization performance graph will be U-shaped.
