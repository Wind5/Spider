 I know of 4 projects for deep learning based on Theano.Keras, Blocks and Lasagne all seem to share the same goal of being more libraries than framework. You can use only one part (e.g. a Layer implementation, training algo) without having to pull in everything :https:github.combartvmblockshttps:github.combenanneLasagneThen there is pylearn2, which look more like a framework and seems to be a good candidate for becoming the GPU-accelerated scikit-learn :https:github.comlisa-labpylearn2I have started using blocks and did some tests with pylearn2. Anybody with more experience want to share the strengthweaknesses of each of those projects ?
 Fwiw, were using pylearn2 and blocks at Ersatz Labs. Both use Theano. Id recommend them, particularly if you are into python.Its hard to build a good NN framework: subtle math bugs can creep in, the field is changing quickly, and there are varied opinions on implementation details (some more valid than others). Even just learning a single framework requires a good deal of effort.
 I know some more. Some of them are made as libraries, some are just code examples, where you however could extract out some relevant code.* PyLearn, LISA labs, http:deeplearning.netsoftwarepylearn2* LSTM, http:deeplearning.nettutoriallstm.html#lstm* LSTM, https:github.comskaaenntools* LSTM, https:github.comJonathanRaimantheano_lstm* LSTM, https:github.commohammadpzRecurrent-Neural-Networks* LSTM, http:christianherta.delehredataSciencemachineLearningn...* LSTM, https:gist.github.comjpuigcerver9358036* LSTM + CTC, https:github.comkastnerkylenet* Speech modeling, LSTM, https:github.comkastnerkylespeech_density* FF + RNN, https:github.comlmjohns3theano-nets* FF + RNN, https:github.comlmjohns3theanetsSpeech: https:github.comlmjohns3arrnn-experimentblobmastertas...* FF, https:github.combenanneLasagne* RNN, https:github.compascanurtrainingRNNs* RNN, https:github.compascanurGroundHog (Razvan Pascanu, KyungHyun Cho, Caglar Gulcehre)* RNN + CTC, https:github.comshawntanrnn-experiment (Shawn Tan)* RNN + CTC, https:github.comshawntantheano-ctc (Shawn Tan)* RNN + CTC, https:github.comrakeshvarrnn_ctc* RNN + CTC, OCR, https:github.comrakeshvarchamanti_ocr, https:github.comrakeshvarchamanti3_ocr* RNN, https:github.comgwtaylortheano-rnn* LSTM, RBM, DBN, https:github.comkratarth1203NeuralNet* RBM, https:github.combenannemorb* Q-learning, https:github.comspragunrdeep_q_rl* Deep Generative Models, https:github.comdpkingmanips14-ssl* RNN, agents, “bricks”: https:github.combartvmblocks* NTM, https:github.comshawntanneural-turing-machines* RL + CNN, https:github.combrian473neural_rl* DRAW RNN, https:github.comjbornscheindrawAnd this is far from complete, there are countless more examples. Just search on GitHub. I just filtered out the ones which interest me (which at least have RNNsLSTMs or some other interesting things).
 Nice work! Since you mentioned youre looking for RNNsLSTMs specifically: the implementation at https:github.comskaaenntools is an extension of Lasagne (which used to be called nntools) and will be merged into the library at some point. Hopefully in time for the first release, but we dont know yet if that will be feasible.
 I would also like to mention my project: pydeeplearn. You can find it here https:github.commihaelacrpydeeplearn. I think its main advantage is that it uses theano under the hood but the user does not need to know theano at all. The most complete implementations are those of RBMs and DBNs, but I also have CNNs. The library has support for adversarial training, as presented in the paper "Explaining and Harnessing Adversarial Examples" by Ian J. Goodfellow, Jonathon Shlens, Christian Szegedy. I recently also integrated spearmint into the library, so hyperparameter optimization comes in for free.
 How does Keras compare to Lasagne [0], which is also PythonTheano based, and which was used with some impressive results [1]? [0] https:github.combenanneLasagne
 One of the authors of Lasagne here! Lasagne is being built by a team of deep learning and music information retrieval researchers. Keras seems to share a lot of design goals with our project, but there are also some significant differences.We both want to build something thats minimalistic, with a simple API, and that allows for fast prototyping of new models. Keras seems to be built on top of Theano in the sense that it hides all the Theano code behind an API (which looks almost exactly like the Torch7 API).Lasagne is built to work with Theano instead. It does not try to hide the symbolic computation graph, because we believe that is where Theanos power comes from. The library provides a bunch of primitives (such as Layer classes) that make building and training neural networks a lot easier. We are also specifically aiming at extensibility: the code is readable and its really easy to implement your own Layer classes.Another difference seems to be the way we interpret the concept of a layer: a Layer in Lasagne adheres as closely as possible to its definition in literature. Keras (and Torch7) treat each operation as a separate stage instead, so a typical fully connected layer has to be constucted as a cascade of a dot product and an elementwise nonlinearity.Layers are also first-class citizens in Lasagne, and a model is usually referred to simply by its output layer or layers. There is no separate "Model" class because we want to keep the interface as small as possible and so far weve done fine without it. In Keras (and Torch7) the layers cannot function by themselves and need to be added to a model instance first.For now, all Lasagne really does in the end is make it easier to construct Theano expressions - we dont have any tools yet for iterating through datasets for example, but we do have plans in this direction. We plan to rely heavily on Python generators for this. The scikit-learn like "model.fit(X, y)" paradigm, which Keras also seems to use, only really works for small datasets which fit in memory. For larger datasets, we believe generators are the way to go. Incidentally, Nolearn ( https:github.comdnourinolearn ) provides a wrapper for Lasagne models with a scikit-learn like interface. We may also add this to the main library at some point.Lasagne is not released yet - the interface is not 100% stable yet, and documentation and tests are a work in progress (although both are progressing nicely). But a lot of people have started using it already, weve built up a nice userbase and a lot of people have started contributing code as well! Were currently aiming to put out the first release by the end of April.A non-exhaustive list of our design goals for the library is in the README on our GitHub page: https:github.combenanneLasagne
