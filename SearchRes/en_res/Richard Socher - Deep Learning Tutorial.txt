In the spring quarter of 2015, I gave an entire class at Stanford on deep learning for natural language processing. 
If you're interested in all the details of these methods and applications, see http://cs224d.stanford.edu
http://lxmls.it.pt/2014/socher-lxmls.pdf - most recent version from a talk at the Machine Learning Summer School in Lisbon 2014
NAACL2013-Socher-Manning-DeepLearning.pdf (22mb) - 204 slides - Updated slides for the NAACL 2013 tutorial
High quality video of the 2013 NAACL tutorial version are up here: http://techtalks.tv/events/312/573/
Machine learning is everywhere in today's NLP, but by and large machine learning amounts to numerical optimization of weights for human designed representations and features. The goal of deep learning is to explore how computers can take advantage of data to develop features and representations appropriate for complex interpretation tasks. This tutorial aims to cover the basic motivation, ideas, models and learning algorithms in deep learning for natural language processing. Recently, these methods have been shown to perform very well on various NLP tasks such as language modeling, POS tagging, named entity recognition, sentiment analysis and paraphrase detection, among others. The most attractive quality of these techniques is that they can perform well without any external hand-designed resources or time-intensive feature engineering. Despite these advantages, many researchers in NLP are not familiar with these methods. Our focus is on insight and understanding, using graphical illustrations and simple, intuitive derivations. The goal of the tutorial is to make the inner workings of these techniques transparent, intuitive and their results interpretable, rather than black boxes labeled "magic here". The first part of the tutorial presents the basics of neural networks, neural word vectors, several simple models based on local windows and the math and algorithms of training via backpropagation. In this section applications include language modeling and POS tagging. In the second section we present recursive neural networks which can learn structured tree outputs as well as vector representations for phrases and sentences. We cover both equations as well as applications. We show how training can be achieved by a modified version of the backpropagation algorithm introduced before. These modifications allow the algorithm to work on tree structures. Applications include sentiment analysis and paraphrase detection. We also draw connections to recent work in semantic compositionality in vector spaces. The principle goal, again, is to make these methods appear intuitive and interpretable rather than mathematically confusing. By this point in the tutorial, the audience members should have a clear understanding of how to build a deep learning system for word-, sentence- and document-level tasks. The last part of the tutorial gives a general overview of the different applications of deep learning in NLP, including bag of words models. We will provide a discussion of NLP-oriented issues in modeling, interpretation, representational power, and optimization.
A very useful assignment for getting started with deep learning in NLP is to implement a simple window-based NER tagger in this exercise we designed for the Stanford NLP class 224N. The zip file includes starter code in Java and the pdf walks through all the steps:
The implementation assignment for a sparse autoencoder can be found here: exercise description pdf and matlab starter code (11MB)
You can find an introductory tutorial here and an implementation assignment for a sparse autoencoder here.
A hands-on tutorial for denoising autoencoders can be found here http://deeplearning.net/tutorial/dA.html#daa
Charles Elkan wrote a great, detailed derivation of recursive neural networks: http://cseweb.ucsd.edu/~elkan/250B/learningmeaning.pdf
You can study clean recursive neural network code with backpropagation through structure on this page: Parsing Natural Scenes And Natural Language With Recursive Neural Networks
Save your text first, then fill out captcha, then save again.
Hi Richard, I am building NER System for Tigrigna, one of under resourced Semitic language like Arabic. Can you guide me please? I faced problems related to UNICODE and etc. Can you where can I get a java code/python script for NER? Thank you!
Please email me a copy of your program of your paper 'Learning Continuous Phrase Representations and Syntactic Parsing with Recursive Neural Networks'? I wll appreciate your kind help. binliu2whu.edu.cn
Hi Richard, I see that you use MATLAB and Java. It is better than use, for instance, Theano (That I see you also use)? I'm ML scientist (NLP), various on ML concepts are clear to me (specially on regularized machines and MLP) although there is a huge to learn. However implementations and large experiments are missing in mi phd thesis (on learning semantic features) so I'd like to get started. 
I know MATLAB, C and Python (little less), however the latter seems to be better for several NLP tasks.
Any way for possible cases you consider according to your expertise, what do you recommend me?
