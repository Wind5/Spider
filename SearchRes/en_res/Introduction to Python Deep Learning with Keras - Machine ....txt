Two of the top numerical platforms in Python that provide the basis for Deep Learning research and development are Theano and TensorFlow.
Both are very powerful libraries, but both can be difficult to use directly for creating deep learning models.
In this post, you will discover the Keras Python library that provides a clean and convenient way to create a range of deep learning models on top of Theano or TensorFlow.
Update Oct/2016: Updated examples for Keras 1.1.0, Theano 0.8.2 and TensorFlow 0.10.0.
Introduction to the Python Deep Learning Library KerasPhoto by Dennis Jarvis, some rights reserved.
Keras is a minimalist Python library for deep learning that can run on top of Theano or TensorFlow.
It was developed to make implementing deep learning models as fast and easy as possible for research and development.
It runs on Python 2.7 or 3.5 and can seamlessly execute on GPUs and CPUs given the underlying frameworks. It is released under the permissive MIT license.
Keras was developed and maintained by François Chollet, a Google engineer using four guiding principles:
Modularity: A model can be understood as a sequence or a graph alone. All the concerns of a deep learning model are discrete components that can be combined in arbitrary ways.
Minimalism: The library provides just enough to achieve an outcome, no frills and maximizing readability.
Extensibility: New components are intentionally easy to add and use within the framework, intended for researchers to trial and explore new ideas.
Python: No separate model files with custom file formats. Everything is native Python.
Keras is relatively straightforward to install if you already have a working Python and SciPy environment.
You must also have an installation of Theano or TensorFlow on your system already.
At the time of writing, the most recent version of Keras is version 1.1.0. You can check your version of Keras on the command line using the following snippet:
You can check your version of Keras on the command line using the following snippet:
Assuming you have both Theano and TensorFlow installed, you can configure the backend used by Keras.
The easiest way is by adding or editing the Keras configuration file in your home directory:
In this configuration file you can change the backend property from tensorflow (the default) to theano. Keras will then use the configuration the next time it is run.
You can confirm the backend used by Keras using the following snippet on the command line:
The main type of model is called a Sequence which is a linear stack of layers.
You create a sequence and add layers to it in the order that you wish for the computation to be performed.
Once defined, you compile the model which makes use of the underlying framework to optimize the computation to be performed by your model. In this you can specify the loss function and the optimizer to be used.
Once compiled, the model must be fit to data. This can be done one batch of data at a time or by firing off the entire model training regime. This is where all the compute happens.
Once trained, you can use your model to make predictions on new data.
We can summarize the construction of deep learning models in Keras as follows:
Make predictions. Use the model to generate predictions on new data.
Take my free 2-week email course and discover MLPs, CNNs and LSTMs (with sample code).
Click to sign-up now and also get a free PDF Ebook version of the course.
The list below provides some additional resources that you can use to learn more about Keras.
Are you looking for a good Deep Learning tutorial to get started, take a look at:
In this post, you discovered the Keras Python library for deep learning research and development.
You discovered that Keras is designed for minimalism and modularity allowing you to very quickly define deep learning models and run them on top of a Theano or TensorFlow backend.
Do you have any questions about Keras or this post? Ask your questions in the comments and I will do my best to answer them.
Dr. Jason Brownlee is a husband, proud father, academic researcher, author, professional developer and a machine learning practitioner. He is dedicated to helping developers get started and get good at applied machine learning.
Great post, Jason! I will start my path in deep learning so I was wondering if you could help me with the hardware requirements. What are the minimal computational resources (disk space for saving/loading CNN models, RAM, GPU time) needed to run keras/theano/tensor flow?
Larger networks like big CNNs do need big hardware, like GPUs. I recommend using GPUs on AWS, it can be very cost effective, e.g. less than $1 an hour.
Generally, when you use Theano as the backend and it is configured to use the GPU (by flags at runtime or in the config), it will report that it is using the GPU on the command line.
Wanted to ask  maybe you have tried Keras for 3D convolution? I ran into some questions with it and cannot get help from the Keras team (https://github.com/fchollet/keras/issues/3561). Would be great if you know what is correct there!
I would like to know if there is a way to prepare a dataset which going to be string sequence of DNA ATGCCGATGA along with its label ? i searched everywhere couldnt find any answer.
You may be able to run on 32-bit linux, I dont know, sorry.
An alternative that will work is using amazon web services to run your models:
Do you know whether Microsoft is using Keras combined with Theano or TensorFlow in their Azure Machine Learning product (https://azure.microsoft.com/en-us/services/machine-learning/ ) ? Possibly some clue to this here however: https://blogs.technet.microsoft.com/machinelearning/2016/11/28/deep-learning-made-easy-in-azure/ but I am not sure..
I am trying to specify theano as default backend using the below command in the terminal 
Is there any way that it converges to the same solution as we have random_state in sklearn which helps us getting the same solution how many ever times we run it.
Thanks for this very useful post. I was convinced! I am moving from pyBrain to Keras now.
I found the format and structure of your blog very good. I am initiating my own to help in an attempt to provide and additional source for my students. 
I have not decided the tools yet, but I would like to make post directly form a jupyter notebook. Is this your case? If so, could you share your workflow and tools used, please?
I found specially interesting the applet you used to show code blocks, which allow toggle the line number on and off.
