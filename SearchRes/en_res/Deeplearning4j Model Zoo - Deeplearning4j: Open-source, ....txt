As of 0.9.0 (or 0.8.1-SNAPSHOT), Deeplearning4j has a new native model zoo that can be accessed and instantiated directly from DL4J. Gone are the days of copying model configs from Github. The model zoo also includes pretrained weights for different datasets that are downloaded automatically and checked for integrity. üöÄ
If you want to use the new model zoo, you will need to add it as a dependency. A Maven POM would add the following:
${deeplearning4j.version} should match the version of DL4J you are currently using, and should be the latest version available in Maven Central.
Once you‚Äôve successfully added the zoo dependency to your project, you can start to import and use models. Each model extends the ZooModel abstract class and uses the InstantiableModel interface. These classes provide methods that help you initialize either an empty, fresh network or a pretrained network.
You can instantly instantiate a model from the zoo using the .init() method. For example, if you want to instantiate a fresh, untrained network of AlexNet you can use the following code:
If you want to tune parameters or change the optimization algorithm, you can obtain a reference to the underlying network configuration:
Some models have pretrained weights available, and a small number of models are pretrained across different datasets. PretrainedType is an enumerator that outlines different weight types, which includes IMAGENET, MNIST, CIFAR10, and VGGFACE.
For example, you can initialize a VGG-16 model with ImageNet weights like so:
If you‚Äôre not sure whether a model contains pretrained weights, you can use the .pretrainedAvailable() method which returns a boolean. Simply pass a PretrainedType enum to this method, which returns true if weights are available.
Note that for convolutional models, input shape information follows the NCHW convention. So if a model‚Äôs input shape default is new int[]{3, 224, 224}, this means the model has 3 channels and height/width of 224.
The model zoo comes with well-known configurations in the deep learning community. This includes ImageNet models such as VGG-16, ResNet-50, AlexNet, Inception-ResNet-v1, GoogLeNet, LeNet, and more. The zoo also includes an LSTM for text generation, and a simple CNN for general image recognition.
You can find a complete list of models using this deeplearning4j-zoo Github link.
The zoo comes with a couple additional features if you‚Äôre looking to use the models for different use cases.
The ModelSelector allows you to select multiple models at once. This method was created for testing multiple models at once.
When you use the selector, it returns a Map<ZooType, ZooModel> collection. Passing ZooType.RESNET50 to ModelSelector.select(ZooType.RESNET50) would return a collection of type HashMap<ZooType.RESNET50, new ResNet50()>. However, if you wanted to initialize multiple models for a specific dataset, you can pass appropriate params to the selector like ModelSelector.select(ZooType.RESNET50, numLabels, seed, iterations).
Let‚Äôs say you wanted to benchmark all of the models that had pretrained weights available for ImageNet. The following code allows you to select all of the convolutional models, check if weights are available, and then execute your own code:
Aside from passing certain configuration information to the constructor of a zoo model, you can also change its input shape using .setInputShape(). NOTE: this applies to fresh configurations only, and will not affect pretrained models:
Pretrained models are perfect for transfer learning! You can read more about transfer learning using DL4J here.
Initialization methods often have an additional parameter named workspaceMode. For the majority of users you will not need to use this; however, if you have a large machine that has ‚Äúbeefy‚Äù specifications, you can pass WorkspaceMode.SINGLE. To learn more about workspaces, please see this section.
