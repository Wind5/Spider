http://www.is.cas.cn//xshd2016/xsbg2016/201409/t20140922_4212395.html
[9-28]Do We Need to Handle Every Temporal Violation in Scientific Workflow Systems?----软件研究所
 [9-28]Do We Need to Handle Every Temporal Violation in Scientific Workflow Systems?
 文章来源：  |  发布时间：2014-09-22  |  【打印】 【关闭】
 题目：Do We Need to Handle Every Temporal Violation in Scientific Workflow Systems?报告人：杨耘（Swinburne University of Technology）时间：9月28日 下午14：00-15：30地点：5号楼裙楼 5层报告厅摘要：Scientific processes are usually time constrained with overall deadlines and local milestones. In scientific workflow systems, due to the dynamic nature of the underlying computing infrastructures such as grid and cloud, execution delays often take place and result in a large number of temporal violations. Since temporal violation handling is expensive in terms of both monetary costs and time overheads, an essential question aroused is that “do we need to handle every temporal violation in scientific workflow systems?”. The answer would be “true” according to existing works on workflow temporal management which adopt the philosophy similar to the handling of functional exceptions, i.e. every temporal violation should be handled whenever it is detected. However, based on our observation, the phenomenon of self-recovery where execution delays can be automatically compensated for by the saved execution time of subsequent workflow activities has been entirely overlooked. Therefore, considering the non-functional nature of temporal violations, our answer is “not necessarily true”. To take advantage of self-recovery, this paper proposes a novel adaptive temporal violation handling point selection strategy where this phenomenon is effectively utilised to avoid unnecessary temporal violation handling. Based on simulations of both real world scientific workflows and randomly generated test cases, the experimental results demonstrate that our strategy can significantly reduce the cost on temporal violation handling by over 96% while maintaining extreme low violation rate under normal circumstances.报告人简介：Professor Yun Yang is with School of Software and Electrical Engineering at Swinburne University of Technology in Melbourne, Australia. His research interests include software engineering; cloud computing data management; cloud workflow; big data and service-oriented computing. He has co-authored three monographs and over 200 papers. In the past 10 years, he has been frequently serving on Program Committees for the top conferences like ICSE and FSE/ESEC.http://www.ict.swin.edu.au/personal/yyang/
