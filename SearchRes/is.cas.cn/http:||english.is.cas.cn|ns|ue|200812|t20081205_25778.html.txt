http://english.is.cas.cn/ns/ue/200812/t20081205_25778.html
 [12-9]APL is Very Productive, Versatile and Easy to Learn 
 Title：APL is Very Productive, Versatile and Easy to Learn Speaker：Dr. Wai-Mee Ching Time：10：00-12：00 am, December 9Venue：Lecture room, Lab for Computer Science, Level 3 Building #5About the speaker： Wai-Mee Ching received his Ph.D. degree in Mathematics from University of Toronto in 1968. He made significant advances in functional analysis: discovered 4th non-isomorphic factor of type II1, and initiated investigation on free products of von Neumann algebras for the study of non-isomorphic factors. He taught mathematics at various universities in U.S. for 8 years. He pioneered research in compiling very high level languages without variable declaration using type-shape analysis, automatic parallelization of array language programs without directives. He designed and implemented APL compilers for vector, shared memory and distributed memory parallel machines. Implemented sophisticated trading algorithms. Designed and implemented very large production financial databases and processing jobs. Abstract： APL has been in action for 42 years; it remains to be the most productive programming language ever designed. It has been used successfully in areas ranging from actuarial work, finance, military, chip design, manufacturing logistics to that of research in physics and biometrics*. The simplicity of its syntax and succinctness of its symbols representing high level primitives encourages a dataflow style of programming to make programs stay as close to their original logical formulation as possible rather than litter with concerns of machine efficiency. It is very easy to learn as well demonstrate here by a few programming examples to cover a major part of the language. APL is currently only interpreted in an interactive environment which greatly enhance its programming experience. But an effective compiler producing efficient C code was implemented at IBM T.J. Watson Research Center in early 90s. Moreover, the array semantics of APL makes automatic parallelization of programs written in good APL style possible as shown by an experimental compiler on IBM SP machine. For details, see: http://www-01.ibm.com/software/awdtools/apl/success.html 
